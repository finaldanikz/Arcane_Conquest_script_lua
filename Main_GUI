local existingGui = game.Players.LocalPlayer.PlayerGui:FindFirstChild("PersistentGUI")
if existingGui then
    existingGui:Destroy()
end

-- Initialize variables at the top
local player = game.Players.LocalPlayer
local gui = nil
local mainFrame = nil
local closeButton = nil
local saveFilePath = "settings.txt"
local tpDelay = 2.5  -- Default teleport delay of 2.5 seconds
local enemyRange = 5  -- Default range from enemy
local autoAbilityLoop = nil
local autoAbilityActive = false
local autoRetryActive = false
local retryLoop = nil

-- Utility functions
local function loadSettings()
    local success, data = pcall(function()
        return game:GetService("HttpService"):JSONDecode(readfile(saveFilePath))
    end)
    if success then
        return data
    else
        return {}
    end
end

local function saveSettings(settings)
    pcall(function()
        writefile(saveFilePath, game:GetService("HttpService"):JSONEncode(settings))
    end)
end

local function makeDraggable(object)
    local UserInputService = game:GetService("UserInputService")
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        object.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    object.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = object.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    object.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Core functionality
local function handleRetry()
    pcall(function()
        if game:GetService("ReplicatedStorage"):FindFirstChild("Start") then
            game:GetService("ReplicatedStorage").Start:FireServer()
            task.wait(0.1)
            if game:GetService("ReplicatedStorage"):FindFirstChild("Retry") then
                game:GetService("ReplicatedStorage").Retry:FireServer()
            end
        end
    end)
end

local function findNearestNPC()
    local nearestNPC = nil
    local nearestDistance = math.huge
    
    local Character = player.Character
    if not Character or not Character:FindFirstChild("HumanoidRootPart") then return end
    
    local enemies = workspace:FindFirstChild("Enemies") -- Fixed folder name
    if not enemies then return end
    
    for _, npc in ipairs(enemies:GetChildren()) do
        if npc:FindFirstChild("HumanoidRootPart") and npc:FindFirstChild("Humanoid") and npc.Humanoid.Health > 0 then
            local distance = (Character.HumanoidRootPart.Position - npc.HumanoidRootPart.Position).Magnitude
            if distance < nearestDistance then
                nearestDistance = distance
                nearestNPC = npc
            end
        end
    end
    return nearestNPC
end

-- Auto Hit functionality
local autoHitActive = false
local autoHitLoop = nil

local function toggleAutoHit(isEnabled)
    autoHitActive = isEnabled
    if isEnabled then
        if not autoHitLoop then
            autoHitLoop = spawn(function()
                while autoHitActive and task.wait(0.3) do
                    pcall(function()
                        if game:GetService("ReplicatedStorage"):FindFirstChild("Click") then
                            game:GetService("ReplicatedStorage").Click:FireServer(true)
                        end
                    end)
                end
            end)
        end
    else
        autoHitActive = false
        if autoHitLoop then
            autoHitLoop = nil
        end
    end
end

-- Auto Ability functionality
local function toggleAutoAbility(isEnabled)
    autoAbilityActive = isEnabled
    if isEnabled then
        if not autoAbilityLoop then
            autoAbilityLoop = spawn(function()
                while autoAbilityActive and task.wait(0.5) do
                    pcall(function()
                        local character = player.Character
                        if character and character:FindFirstChild("HumanoidRootPart") then
                            local lookVector = character.HumanoidRootPart.CFrame.LookVector
                            local spellRemote = game:GetService("ReplicatedStorage"):FindFirstChild("Spell")
                            
                            if spellRemote then
                                -- Fire Spell1
                                spellRemote:FireServer("Spell1", character.HumanoidRootPart.Position, lookVector, 0)
                                task.wait(0.1)
                                -- Fire Spell2
                                spellRemote:FireServer("Spell2", character.HumanoidRootPart.Position, lookVector, 0)
                            end
                        end
                    end)
                end
            end)
        end
    else
        autoAbilityActive = false
        if autoAbilityLoop then
            autoAbilityLoop = nil
        end
    end
end

-- Teleport functionality
local TweenService = game:GetService("TweenService")
local mobTeleportActive = false
local teleportLoop = nil

local function calculateCircularPosition(enemyPos, radius, angle)
    local x = enemyPos.X + (radius * math.cos(angle))
    local z = enemyPos.Z + (radius * math.sin(angle))
    return Vector3.new(x, enemyPos.Y, z)
end

local function toggleMobTeleport(isEnabled)
    mobTeleportActive = isEnabled
    
    if isEnabled then
        if not teleportLoop then
            local angle = 0
            teleportLoop = spawn(function()
                while mobTeleportActive and task.wait(tpDelay) do
                    pcall(function()
                        local character = player.Character
                        if character and character:FindFirstChild("HumanoidRootPart") then
                            local nearestEnemy = findNearestNPC()
                            if nearestEnemy and nearestEnemy:FindFirstChild("HumanoidRootPart") then
                                local enemyPos = nearestEnemy.HumanoidRootPart.Position
                                local targetPos = calculateCircularPosition(enemyPos, enemyRange, angle)
                                
                                character.HumanoidRootPart.CFrame = CFrame.new(targetPos, enemyPos)
                                character.Humanoid.PlatformStand = true
                                
                                angle = angle + (math.pi / 180)
                                if angle >= 2 * math.pi then
                                    angle = 0
                                end
                            end
                        end
                    end)
                end
            end)
        end
    else
        mobTeleportActive = false
        if teleportLoop then
            teleportLoop = nil
            pcall(function()
                player.Character.Humanoid.PlatformStand = false
            end)
        end
    end
end

-- Create GUI
local function createGui()
    if gui then 
        gui:Destroy() 
    end
    
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local HeaderLabel = Instance.new("TextLabel")
    local ButtonContainer = Instance.new("Frame")
    local CloseButton = Instance.new("TextButton")
    
    ScreenGui.Name = "PersistentGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.DisplayOrder = 999999999
    ScreenGui.Parent = player.PlayerGui
    
    gui = ScreenGui
    
    -- Main Frame with rounded corners and gradient
    MainFrame.Size = UDim2.new(0.25, 0, 0.7, 0)
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    MainFrame.BackgroundTransparency = 0.1
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Visible = true
    MainFrame.Parent = ScreenGui
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0.02, 0)
    mainCorner.Parent = MainFrame
    
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 45)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 30))
    })
    gradient.Rotation = 45
    gradient.Parent = MainFrame
    
    -- Header with modern font and styling
    HeaderLabel.Size = UDim2.new(1, 0, 0.1, 0)
    HeaderLabel.Position = UDim2.new(0, 0, 0, 0)
    HeaderLabel.BackgroundTransparency = 1
    HeaderLabel.Text = "Kinayo Enhanced"
    HeaderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    HeaderLabel.Font = Enum.Font.GothamBold
    HeaderLabel.TextSize = 24
    HeaderLabel.Parent = MainFrame
    
    -- Enhanced Close Button
    CloseButton.Size = UDim2.new(0, 150, 0, 45)
    CloseButton.Position = UDim2.new(0.5, -75, 0, -40)
    CloseButton.BackgroundColor3 = Color3.fromRGB(86, 71, 201)
    CloseButton.BackgroundTransparency = 0.1
    CloseButton.Text = "Open/Close"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.TextSize = 16
    CloseButton.Parent = ScreenGui
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0.3, 0)
    closeCorner.Parent = CloseButton
    
    -- Button Container with modern layout
    ButtonContainer.Size = UDim2.new(0.9, 0, 0.6, 0)
    ButtonContainer.Position = UDim2.new(0.5, 0, 0.45, 0)
    ButtonContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    ButtonContainer.BackgroundTransparency = 1
    ButtonContainer.Parent = MainFrame
    
    local UIGridLayout = Instance.new("UIGridLayout")
    UIGridLayout.Parent = ButtonContainer
    UIGridLayout.CellSize = UDim2.new(0.45, 0, 0.15, 0)
    UIGridLayout.CellPadding = UDim2.new(0.05, 0, 0.05, 0)
    UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    
    -- Make frames draggable
    makeDraggable(CloseButton)
    makeDraggable(MainFrame)
    
    -- Create enhanced toggle buttons
    local savedSettings = loadSettings()
    
    local function createToggleButton(number, name, onClick)
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 1, 0)
        button.BackgroundColor3 = Color3.fromRGB(86, 71, 201)
        button.BackgroundTransparency = 0.8
        button.Text = name
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Font = Enum.Font.GothamBold
        button.TextSize = 14
        button.LayoutOrder = number
        button.Parent = ButtonContainer
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0.2, 0)
        corner.Parent = button
        
        local stroke = Instance.new("UIStroke")
        stroke.Color = Color3.fromRGB(86, 71, 201)
        stroke.Transparency = 0.2
        stroke.Thickness = 2
        stroke.Parent = button
        
        local isEnabled = savedSettings[name] or false
        
        local function updateButtonAppearance()
            if isEnabled then
                button.BackgroundTransparency = 0
                stroke.Transparency = 0
            else
                button.BackgroundTransparency = 0.8
                stroke.Transparency = 0.2
            end
        end
        
        updateButtonAppearance()
        
        if isEnabled then
            onClick(true)
        end
        
        button.MouseButton1Click:Connect(function()
            isEnabled = not isEnabled
            updateButtonAppearance()
            onClick(isEnabled)
            savedSettings[name] = isEnabled
            saveSettings(savedSettings)
        end)
        
        -- Hover effect
        button.MouseEnter:Connect(function()
            game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
                BackgroundTransparency = isEnabled and 0.2 or 0.6
            }):Play()
        end)
        
        button.MouseLeave:Connect(function()
            game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
                BackgroundTransparency = isEnabled and 0 or 0.8
            }):Play()
        end)
    end
    
    -- Create enhanced buttons with modern styling
    createToggleButton(1, "Auto Hit", toggleAutoHit)
    createToggleButton(2, "Auto Ability", toggleAutoAbility)
    createToggleButton(3, "Mob Teleport", toggleMobTeleport)
    createToggleButton(4, "Auto Retry", function(enabled)
        autoRetryActive = enabled
        if enabled then
            if not retryLoop then
                retryLoop = spawn(function()
                    while autoRetryActive and task.wait(1) do
                        handleRetry()
                    end
                end)
            end
        else
            if retryLoop then
                retryLoop = nil
            end
        end
    end)
    
-- Enhanced sliders with modern styling
    local function createSlider(parent, position, title, min, max, defaultValue, onValueChanged)
        local sliderContainer = Instance.new("Frame")
        sliderContainer.Size = UDim2.new(0.8, 0, 0.15, 0)
        sliderContainer.Position = position
        sliderContainer.BackgroundTransparency = 1
        sliderContainer.Parent = parent
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, 0, 0.4, 0)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = title
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        titleLabel.TextSize = 14
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.Parent = sliderContainer
        
        local sliderBar = Instance.new("Frame")
        sliderBar.Size = UDim2.new(1, 0, 0.2, 0)
        sliderBar.Position = UDim2.new(0, 0, 0.5, 0)
        sliderBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        sliderBar.BorderSizePixel = 0
        sliderBar.Parent = sliderContainer
        
        local fill = Instance.new("Frame")
        fill.Size = UDim2.new(defaultValue/(max-min), 0, 1, 0)
        fill.BackgroundColor3 = Color3.fromRGB(86, 71, 201)
        fill.BorderSizePixel = 0
        fill.Parent = sliderBar
        
        local knob = Instance.new("Frame")
        knob.Size = UDim2.new(0, 16, 0, 16)
        knob.Position = UDim2.new(defaultValue/(max-min), 0, 0.5, 0)
        knob.AnchorPoint = Vector2.new(0.5, 0.5)
        knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        knob.Parent = sliderBar
        
        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(1, 0, 0.4, 0)
        valueLabel.Position = UDim2.new(0, 0, 0.8, 0)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Text = tostring(defaultValue)
        valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        valueLabel.TextSize = 14
        valueLabel.Font = Enum.Font.GothamBold
        valueLabel.Parent = sliderContainer
        
        -- Add rounded corners
        local sliderCorner = Instance.new("UICorner")
        sliderCorner.CornerRadius = UDim.new(0.5, 0)
        sliderCorner.Parent = sliderBar
        
        local fillCorner = Instance.new("UICorner")
        fillCorner.CornerRadius = UDim.new(0.5, 0)
        fillCorner.Parent = fill
        
        local knobCorner = Instance.new("UICorner")
        knobCorner.CornerRadius = UDim.new(1, 0)
        knobCorner.Parent = knob
        
        -- Add shadow effect to knob
        local knobStroke = Instance.new("UIStroke")
        knobStroke.Color = Color3.fromRGB(86, 71, 201)
        knobStroke.Thickness = 2
        knobStroke.Parent = knob
        
        local UserInputService = game:GetService("UserInputService")
        local dragging = false
        
        local function updateValue(input)
            local absolutePosition = input.Position
            if UserInputService.TouchEnabled then
                absolutePosition = Vector2.new(input.Position.X, input.Position.Y)
            end
            
            local relativePos = (absolutePosition.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X
            relativePos = math.clamp(relativePos, 0, 1)
            
            local value = math.floor(min + ((max - min) * relativePos))
            value = math.clamp(value, min, max)
            
            -- Smooth transition using TweenService
            local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            
            TweenService:Create(fill, tweenInfo, {
                Size = UDim2.new(relativePos, 0, 1, 0)
            }):Play()
            
            TweenService:Create(knob, tweenInfo, {
                Position = UDim2.new(relativePos, 0, 0.5, 0)
            }):Play()
            
            valueLabel.Text = tostring(value)
            onValueChanged(value)
        end
        
        sliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or 
               input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                updateValue(input)
            end
        end)
        
        sliderBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or 
               input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
        
        sliderBar.InputChanged:Connect(function(input)
            if dragging and 
               (input.UserInputType == Enum.UserInputType.MouseMovement or 
                input.UserInputType == Enum.UserInputType.Touch) then
                updateValue(input)
            end
        end)
        
        -- Add hover effect
        sliderBar.MouseEnter:Connect(function()
            TweenService:Create(fill, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(106, 91, 221)
            }):Play()
        end)
        
        sliderBar.MouseLeave:Connect(function()
            TweenService:Create(fill, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(86, 71, 201)
            }):Play()
        end)
        
        return sliderContainer
    end
    
    -- Create enhanced retry button
    local function createRetryButton(parent)
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(0.3, 0, 0.08, 0)
        button.Position = UDim2.new(0.35, 0, 0.9, 0)
        button.BackgroundColor3 = Color3.fromRGB(86, 71, 201)
        button.Text = "Retry"
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Font = Enum.Font.GothamBold
        button.TextSize = 14
        button.Parent = parent
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0.3, 0)
        corner.Parent = button
        
        local stroke = Instance.new("UIStroke")
        stroke.Color = Color3.fromRGB(255, 255, 255)
        stroke.Transparency = 0.7
        stroke.Thickness = 1
        stroke.Parent = button
        
        -- Add hover effect
        button.MouseEnter:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(106, 91, 221)
            }):Play()
        end)
        
        button.MouseLeave:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(86, 71, 201)
            }):Play()
        end)
        
        button.MouseButton1Click:Connect(function()
            handleRetry()
        end)
        
        return button
    end
    
    -- Create sliders with loaded settings
    createSlider(
        MainFrame, 
        UDim2.new(0.1, 0, 0.65, 0),
        "TP Delay", 
        0, 
        5, 
        savedSettings["tpDelay"] or tpDelay,
        function(value) 
            tpDelay = value 
            savedSettings["tpDelay"] = value
            saveSettings(savedSettings)
        end
    )
    
    createSlider(
        MainFrame, 
        UDim2.new(0.1, 0, 0.8, 0),
        "Enemy Range", 
        1, 
        20,
        savedSettings["enemyRange"] or enemyRange,
        function(value) 
            enemyRange = value 
            savedSettings["enemyRange"] = value
            saveSettings(savedSettings)
        end
    )
    
    -- Create retry button
    createRetryButton(MainFrame)
    
    -- Toggle MainFrame visibility with CloseButton
    CloseButton.MouseButton1Click:Connect(function()
        MainFrame.Visible = not MainFrame.Visible
    end)
    
    return ScreenGui
end

-- Initialize the GUI
local guiInstance = createGui()

spawn(function()
    task.wait(1)
    handleRetry()
end)
